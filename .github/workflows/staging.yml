name: Staging
on:
  push:
    branches:
      - 'master'
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_role_name: webinvest-pipeline_cd-nonprod
  TF_VAR_account_id: '069537940840'
  TF_VAR_team_github_token: ${{ secrets.TEAM_GITHUB_TOKEN }}
  TF_VAR_teams_webhook: ${{ secrets.TEAMS_WEBHOOK_URL }}
  PR_NUMBER: ${{ github.event.number }}
  REPO_NAME: ${{ github.event.repository.name }}
  REACT_APP_STAGE: staging
concurrency: queue-${{ github.ref }} # Queue builds per git ref. concurrent updates to terraform cause errors.

jobs:
  install:
    name: Install dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: latest
          registry-url: 'https://npm.pkg.github.com'

      - name: Cache node modules
        id: cache-modules
        uses: actions/cache@v2
        env:
          cache-name: module
          NODE_AUTH_TOKEN: ${{ secrets.TEAM_PAT }}
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-module-${{ hashFiles('**/package-lock.json') }}

      - name: Set up registry
        uses: actions/setup-node@v3
        with:
          node-version: latest
          registry-url: 'https://npm.pkg.github.com'

      - name: Install packages
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: |
          npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.TEAM_PAT }}

  analysis:
    name: Run SAST tests
    runs-on: ubuntu-latest
    needs: install

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: latest
          registry-url: 'https://npm.pkg.github.com'

      - name: Cache node modules
        id: cache-modules
        uses: actions/cache@v2
        env:
          cache-name: module
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-module-${{ hashFiles('**/package-lock.json') }}

      - name: Run Sast
        run: |
          npm run sast:Format
          npm run sast:Lint

  unittest:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: install

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: latest
          registry-url: 'https://npm.pkg.github.com'

      - name: Cache node modules
        id: cache-modules
        uses: actions/cache@v2
        env:
          cache-name: module
          NODE_AUTH_TOKEN: ${{ secrets.TEAM_PAT }}

        with:
          path: 'node_modules'
          key: ${{ runner.os }}-module-${{ hashFiles('**/package-lock.json') }}

      - name: Run unit tests
        run: |
          npm run test:Unit

  build:
    name: Build static site
    runs-on: ubuntu-latest
    needs: install

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: latest
          registry-url: 'https://npm.pkg.github.com'

      - name: Cache node modules
        id: cache-modules
        uses: actions/cache@v2
        env:
          cache-name: module
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-module-${{ hashFiles('**/package-lock.json') }}
          node-version: latest

      - name: get version
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'package.json'
          prop_path: 'version'

      - name: Build site
        run: |
          npm run build
          echo ${{ steps.version.outputs.prop }}${{ github.run_number }}-${{ github.head_ref }} > build/version.txt
        env:
          CI: false
          PUBLIC_URL: /${{ env.REPO_NAME }}/v/latest/

      - uses: actions/upload-artifact@v2
        name: Upload release artifact
        with:
          name: build
          path: build/
          retention-days: 5
          if-no-files-found: error

  #  lambda-edge-unit-test:
  #    name: Lambda Edge Test
  #    runs-on: ubuntu-latest
  #    defaults:
  #      run:
  #        working-directory: edge-config
  #    steps:
  #      - uses: actions/checkout@v3
  #        with:
  #          persist-credentials: false
  #      - uses: actions/setup-node@v3
  #        with:
  #          node-version: latest
  #          registry-url: 'https://npm.pkg.github.com'
  #
  #      - name: Cache node modules
  #        id: cache-modules
  #        uses: actions/cache@v2
  #        env:
  #          cache-name: lambda-edge
  #        with:
  #          path: 'edge-config/node_modules'
  #          key: ${{ runner.os }}-lambda-edge-${{ hashFiles('**/package-lock.json') }}
  #
  #      - name: Install packages
  #        if: steps.cache-modules.outputs.cache-hit != 'true'
  #        run: |
  #          echo //npm.pkg.github.com/:_authToken=${{secrets.TEAM_PAT}} >> ~/.npmrc
  #          npm ci
  #
  #      - name: Run unit tests
  #        run: |
  #          npm run test

  deploy:
    name: Deploy site to version and latest folder
    runs-on: ubuntu-latest
    environment: nonprod
    needs:
      - build
      - analysis
      - unittest

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      - name: get version
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'package.json'
          prop_path: 'version'

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::${{ env.TF_VAR_account_id }}:role/${{ env.TF_VAR_role_name }}
          role-duration-seconds: 1200

      - name: Upload static content to version folder
        run: |
          cd build && aws s3 sync . s3://webinvest-nonprod-${{ env.TF_VAR_account_id }}/${{ env.REPO_NAME }}/v/${{ steps.version.outputs.prop }} --exclude 'static/*'

      - name: Upload and set caching for static prefix for version folder
        run: |
          cd build && aws s3 sync . s3://webinvest-nonprod-${{ env.TF_VAR_account_id }}/${{ env.REPO_NAME }}/v/${{ steps.version.outputs.prop }} --include 'static/*' --cache-control 'max-age=31536000'

      - name: Upload static content to latest folder
        run: |
          cd build && aws s3 sync . s3://webinvest-nonprod-${{ env.TF_VAR_account_id }}/${{ env.REPO_NAME }}/v/latest --exclude 'static/*'

      - name: Upload and set caching for static prefix for latest folder
        run: |
          cd build && aws s3 sync . s3://webinvest-nonprod-${{ env.TF_VAR_account_id }}/${{ env.REPO_NAME }}/v/latest --include 'static/*' --cache-control 'max-age=31536000'

  integration-tests:
    name: Integration Tests - ${{ matrix.browser }}
    environment: nonprod
    needs:
      - deploy
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    # Use GitHub Private runners
    runs-on: ['self-hosted', 'linux', 'x64', 'apac', 'nonprod']
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: Cache node modules
        id: cache-modules
        uses: actions/cache@v2
        env:
          cache-name: module
          NODE_AUTH_TOKEN: ${{ secrets.TEAM_PAT }}
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-module-${{ hashFiles('**/package-lock.json') }}
          node-version: '16.x'

      - name: Install packages
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: |
          npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.TEAM_PAT }}

      - name: Install operating system dependencies
        run: |
          npx playwright install

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::${{ env.TF_VAR_account_id }}:role/${{ env.TF_VAR_role_name }}
          role-duration-seconds: 1200

      - name: Execute tests
        run: |
          export URL=https://uat.nonprod.cmcmarketsinvest.com/${{ env.REPO_NAME }}/v/latest
          echo "Executing E2E tests on '${URL}'"
          npm run test:playwright:ci:nonprod
        env:
          FORGEROCK_PASSWORD: ${{ secrets.FORGEROCK_PASSWORD }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ env.REPO_NAME }}-${{ env.PR_NUMBER }}-${{ matrix.os }}-${{ matrix.browser }}
          path: tests/test-results
          retention-days: 5

  opsgenie-status:
    name: Opsgenie Status Update
    runs-on: ubuntu-latest
    if: ${{ always() }}
    environment: nonprod
    needs:
      - integration-tests
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::${{ env.TF_VAR_account_id }}:role/${{ env.TF_VAR_role_name }}
          role-duration-seconds: 1200
      - name: Opsgenie Workflow Status
        if: ${{ always() && github.ref == 'refs/heads/master' }}
        run: |
          if [ ${{ needs.integration-tests.result }} = 'success' ]; then OPSGENIE_STATUS=OK; else OPSGENIE_STATUS=ALARM; fi
          SNS_MESSAGE="{ \"AlarmName\": \"/webinvest/prod/github/${{ github.repository }}/P4\", \"AlarmDescription\": \"Github deploy ${OPSGENIE_STATUS} '${{ github.repository }}' by '${{ github.actor }}'\", \"AWSAccountId\": \"${{ env.TF_VAR_account_id }}\", \"NewStateValue\": \"${OPSGENIE_STATUS}\", \"Region\": \"Asia Pacific (Sydney)\" }"
          aws sns publish --topic-arn arn:aws:sns:ap-southeast-2:${{ env.TF_VAR_account_id }}:webinvest-ap-southeast-2-opsgenie --message "${SNS_MESSAGE}"
